# Seed for org-mode + reveal.js (4.x) presentation using org-re-reveal
# Use C-c C-e v v to export

# Org-mode Customizations
# Enable in-buffer virtual slide numbering, show headings, hide code blocks
#+STARTUP: num content hideblocks
#+OPTIONS: toc:nil d:nil timestamp:nil num:t email:t ':t
#  Disable exporting of TOC, drawer, creation time stamp
#  Enable auto-numbering headings, smart quotes and exporting of email
#    Auto-numbering is needed to give slides sequential URIs (see below)

# Reveal Customizations
#+REVEAL_VERSION: 4
#+REVEAL_THEME: night
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
# Enable syntax highlighting, zoom (M-click), search (C-S-f), speaker notes
#+REVEAL_PLUGINS: (highlight zoom notes search)
#+REVEAL_HIGHLIGHT_CSS: ./reveal.js/plugin/highlight/monokai.css
#+REVEAL_EXTRA_CSS: ./presentation.css

#+name: startup
#+begin_src emacs-lisp :exports none :results none
  (if (not (require 'org-re-reveal nil t))
    (warn "Failed loading ox-reveal package")
    (set (make-local-variable 'org-re-reveal-width) 1920)
    (set (make-local-variable 'org-re-reveal-height) 1080)
    ;; give slides sequential URIs; refer org-re-reveal-generate-custom-ids
    (set (make-local-variable 'org-re-reveal-history) t))
#+END_SRC

#+title: Build System Fundamentals
#+author: Sundaram Ramaswamy
#+email: sundaram@microsoft.com

* Agenda

#+begin_notes
Levels of automation, really.
#+end_notes

#+ATTR_REVEAL: :frag (appear)
1. Manual: *Hand-made*
   - Build Configurations
   - Binaries
2. Build system: */Makefile/*, /Ninja/, ...
   - Targets
   - Recipes
   - Dependencies
3. Meta-build system: */GN/*, /CMake/, /meson/, ...

* Part 1: Hand-/Made/ C++
* Hand-Compiling

#+begin_src bash
  # GCC/Clang on Linux/macOS
  $ g++ hello.cpp
  $ ./a.out
  $ g++ -std=c++20 hello.cpp -o hello
  $ ./hello
  
  # MSVC on Windows
  > cl /EHsc /std:c++17 hello.cpp
  > hello.exe
#+end_src

- Common Flags
  + Input: /bunch of files/
  + Output: ~-o~
  + Language standard: ~-std=c++14~ _optional_
- ~g++~ and ~cl~ are just +compiler+ tool chain front-ends

* Tools in the Chain

#+begin_src cpp
  #include <iostream>                  // preprocessor
  
  float perimeter(float radius);       // compiler
  extern float PI;                     // linker
  
  int main() {                         // linker
    constexpr auto radius = 2.71828f;  // compiler
    std::cout << perimeter(radius);    // compiler + linker
  }
#+end_src

- Many tools come together in making a /binary/
  + Preprocessor
  + Compiler
  + Linker
  + /more.../
- Front-end push arguments to back-end
  + Directly or Indirectly

\\

| Add        | Include Dir              | Library Dir         |
|------------+--------------------------+---------------------|
| Directly   | ~-I./inc~                | ~-L./libs~          |
| Indirectly | ~-Xpreprocessor -I./inc~ | ~-Xlinker -L./libs~ |

* Tools and Switches

#+begin_src bash
  # GCC/MinGW on Windows
  > g++ -std=c++17 -D_DEBUG hello.cpp -g -O0 -flto -o hello.exe
  
  # MSVC on Windows
  > cl /EHsc /std:c++17 /D_DEBUG hello.cpp /Zi /Od /LTCG
#+end_src

#+ATTR_REVEAL: :frag (appear)
- Compiler Flags
  + Enable debug symbols: ~-g~
  + Disable optimizations: ~-O0~
- Linker Flags
  + Link time optimization: ~-flto~
- Preprocessor Flags
  + Define macros, add include dirs, etc.
  + ~-D_DEBUG~ \rightarrow ~#define _DEBUG~
  + ~-DPI=3.14~ \rightarrow ~#define PI 3.14~
- *List of flags can get long, /really long/*
  + MSVC: 166 (/1 platform, arch-neutral/)
  + GCC: [[https://gcc.gnu.org/onlinedocs/gcc-11.1.0/gcc/Option-Summary.html][gazillion]] (/multi-arch, multi-platform/ ðŸ¤¯)

* Software and Features

#+begin_quote
Conditional compilation of certain pieces of code.
#+end_quote

#+begin_src bash
  # 2. Conditional Inclusion
  # BUILD.gn
  if (is_linux || is_chromeos) {
    sources += [
      "base_paths_posix.cc"
    ]
  }
#+end_src

#+begin_src cpp
  // 1. Macro
  // C++
  #if defined(ENABLE_TAB_TOGGLE)
    tab_toggler.init();
  #endif
#+end_src

#+ATTR_REVEAL: :frag (none none appear)
- Features are made of code
- Code can guarded by switches
  1. Macros
  2. Conditional inclusion of files
- *Binary wonâ€™t have omitted featureâ€™s bits*
  + Unlike /command-line-flag/-enabled features

* Build Configuration

#+ATTR_REVEAL: :frag (appear)
- Toolchain switches: ~m~
- Software switches: ~n~
- Thank goodness we donâ€™t need ~m x n~
  + Strictly speaking ~m x n~ isnâ€™t possible
- *Switches can be inter-dependant*
  + Example: turning on PDF might need Print support

#+ATTR_REVEAL: :frag appear
#+begin_quote
*Configuration*: A particular combination of all switches.

Think: ~args.gn~
#+end_quote

* Common Configurations

#+begin_src bash
  $ cd ~/edge/src
  $ gn args out/release_x64 --list --short | wc -l
  $ 887
  
  $ wc -l < out/release_x64/args.gn
  $ 11
  $ gn args out/release_x64 --list --short --overrides-only | wc -l
  $ 20
  
  $ gn args out/release_x64 --list=crashpad_dependencies
  crashpad_dependencies
    Current value = "chromium"
      From //.gn:51
    Overridden from the default = "standalone"
      From //third_party/crashpad/crashpad/build/crashpad_buildconfig.gni:19
#+end_src

- /Debug/
  + Disable optimizations
  + Keep symbols
- /Release/
  + Enable optimizations
  + Strip debug symbols
- Debug \minus logging (/DbgNoLog/)
- Release + debug (/RelDbg/)
- Release + size optimization (/RelMinSize/)
- ...

* Object/Machine Code

#+ATTR_REVEAL: :frag appear :frag_idx 5
#+begin_src bash
  $ g++ -std=c++17 -c hello.cpp
  $ ls
  hello.cpp    hello.o
  $ nm hello.o
  0000000000000000 T greet
  
  > cl /EHsc /c hello.cpp
  > dir
  hello.cpp hello.obj
  > dumpbin /symbols hello.obj
#+end_src

#+ATTR_REVEAL: :frag (appear) :frag_idx (1 3 4)
- C++ \rightarrow +byte+ *native code*; runs on actual CPU
  #+ATTR_REVEAL: :frag (appear) :frag_idx (2)
  + Not interpreted by VMÂ¹
    - Java: /JVM/, Python: /CPython/, C#: /CLR/, ...
- Non-portable binary generated; depends on
  + Architecture (arm64, x64, MIPS, PowerPC, ...) _EXECUTE_
  + OS (Linux, Windows, macOS, ...) _LOAD_ _SYSCALLS_
- Basic unit of a compiled C++ (C and C-Obj)
  + GCC/Clang: ~.o~
  + MSVC: ~.obj~

#+ATTR_REVEAL: :frag appear :frag_idx 2
#+ATTR_HTML: :style font-size: large;
1: Donâ€™t conflate with entire machine VMs like /Hyper-V/, /VirtualBox/, ...

* Shared Library

#+ATTR_REVEAL: :code_attribs data-line-numbers='1,2,4,13-15'
#+begin_src bash
  $ ar -rcs libTrig.a sin.o cos.o tan.o
  $ ar -t libTrig.a
  sin.o cos.o tan.o
  $ nm libTrig.a
  0000000000000000 T sin
  0000000000001000 T cos
  ...
  
  $ ls -l
  80K   libTrig.a
  20K   libmath.a
  200K  tool.o
  $ gcc -o tool tool.o libTrig.a
  ld: sin.o: undefined reference to 'add(int, int)'
  $ gcc -o tool tool.o -ltrig -lmath
  $ ls -l tool
  300K  tool
#+end_src

#+begin_src bash :exports none
  > lib /out:trig.lib sin.obj cos.obj tan.obj
  > lib /list trig.lib
  sin.obj cos.obj
#+end_src

#+ATTR_REVEAL: :frag (appear)
- Bundle of utility functions (or classes)
- An archive of object files
  + With some headers e.g. ~trig.h~, ~libTrig.a~
- Canâ€™t define entry functions ~main()~, ~DllMain()~, ...
- *Code attaches to final executable*
- *Dependencies arenâ€™t resolved!*
- Advantages
  + No versioning issues
  + No missing dependencies
  + No [[https://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]
- Disadvantages
  + Size; multiple copies
  + App needs rebuilding on library update
  + No sweeping updates; every app needs rebuild




# https://emacs.stackexchange.com/q/12938/4106
# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (progn (org-babel-goto-named-src-block "startup") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
