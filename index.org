# Seed for org-mode + reveal.js (4.x) presentation using org-re-reveal
# Use C-c C-e v v to export

# Org-mode Customizations
# Enable in-buffer virtual slide numbering, show headings, hide code blocks
#+STARTUP: num content hideblocks
#+OPTIONS: toc:nil d:nil timestamp:nil num:t email:t ':t ^:{}
#  Disable exporting of TOC, drawer, creation time stamp
#  Enable auto-numbering headings, smart quotes and exporting of email
#    Auto-numbering is needed to give slides sequential URIs (see below)
#  Interpret a_{b}, and not a_b, as subscript

# Reveal Customizations
#+REVEAL_VERSION: 4
#+REVEAL_THEME: night
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
# Enable syntax highlighting, zoom (M-click), search (C-S-f), speaker notes
#+REVEAL_PLUGINS: (highlight zoom notes search)
#+REVEAL_HIGHLIGHT_CSS: ./reveal.js/plugin/highlight/monokai.css
#+REVEAL_EXTRA_CSS: ./styles.css

#+name: startup
#+begin_src emacs-lisp :exports none :results none
  (if (not (require 'org-re-reveal nil t))
    (warn "Failed loading ox-reveal package")
    (set (make-local-variable 'org-re-reveal-width) 1920)
    (set (make-local-variable 'org-re-reveal-height) 1080)
    ;; give slides sequential URIs; refer org-re-reveal-generate-custom-ids
    (set (make-local-variable 'org-re-reveal-history) t))
#+END_SRC

#+title: Build Fundamentals
#+author: Sundaram Ramaswamy
#+email: sundaram@microsoft.com

* Agenda

#+begin_notes
Levels of automation, really.
#+end_notes

#+ATTR_REVEAL: :frag (appear)
1. Manual: *Hand-made*
   - Binaries
   - Build Configurations
2. Build system: */Make/*, /Ninja/, /MSBuild/, ...
   - Targets
   - Recipes
   - Dependencies
3. Meta-build system: */GN/*, /CMake/, /meson/, ...

* Part 1 -- /Manual/
* Hand-+Make+ Made

#+begin_src bash
  # GCC/Clang on Linux/macOS
  $ g++ hello.cpp
  $ ./a.out
  $ g++ -std=c++20 -Wall hello.cpp -o hello
  $ ./hello
  
  # MSVC on Windows
  > cl /EHsc /std:c++17 /W3 hello.cpp
  > hello.exe
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- Common Flags
  + Input: /bunch of files/
  + Output: ~-o~
  + Language standard: ~-std=c++14~ _optional_
  + Warning level: ~-Wall~ _best practise_ _optional_
- ~g++~ and ~cl~ are just +compiler+ toolchain front-ends
  + Clang (~clang++~) copies GCC‚Äôs flags

\\

#+ATTR_REVEAL: :frag appear :frag_index 2
#+begin_quote
A useful +wizardry+ skill even today.
#+end_quote

* Tools in the Chain

#+begin_src cpp
  #include <iostream>                  // preprocessor
  
  float perimeter(float radius);       // compiler
  extern float PI;                     // linker
  
  int main() {                         // linker
    constexpr auto radius = 2.71828f;  // compiler
    std::cout << perimeter(radius);    // compiler + linker
  }
#+end_src

- Many tools come together in making a /binary/
  + Preprocessor: glorified find-replace / copy-paste
  + Compiler: generates code
  + Linker: resolves dependencies
  + /more.../
- Front-end \rightarrow /arguments/ \rightarrow Back-end
  + Directly or Indirectly

\\

| Add        | Include Dir (Preprocessor)               | Library Dir (Linker)         |
|------------+------------------------------------------+------------------------------|
| Directly   | ~-I./inc~                                | ~-L./lib~                    |
| Indirectly | ~-Xpreprocessor -I -Xpreprocessor ./inc~ | ~-Xlinker -L -Xlinker ./lib~ |

* Binaries

- Kinds
  1. Executable
  2. Static Library
  3. Shared Library
- Build lingo: /artefacts/

* Object/Machine Code

#+ATTR_REVEAL: :frag appear :frag_idx 5
#+begin_src bash
  $ g++ -std=c++17 -c hello.cpp
  $ ls
  hello.cpp    hello.o
  $ nm hello.o
  0000000000000000 T greet
  
  > cl /EHsc /c hello.cpp
  > dir
  hello.cpp    hello.obj
  > dumpbin /symbols hello.obj
#+end_src

#+ATTR_REVEAL: :frag (appear) :frag_idx (1 3 4)
- C++ \rightarrow +byte+ *native code*; runs on actual CPU
  #+ATTR_REVEAL: :frag (appear) :frag_idx (2)
  + Not interpreted by VM¬π
    - Java: /JVM/, Python: /CPython/, C#: /CLR/, ...
- Non-portable binary; depends on
  + Architecture (arm64, x64, MIPS, PowerPC, ...) _EXECUTE_
  + OS (Linux, Windows, macOS, ...) _LOAD_ _SYSCALLS_
- Basic unit of /compiled/ C, C++ and Obj-C
  + GCC/Clang: ~.o~
  + MSVC: ~.obj~

#+ATTR_REVEAL: :frag appear :frag_idx 2
#+ATTR_HTML: :class footnote
1: Don‚Äôt conflate with entire machine VMs like /Hyper-V/, /VirtualBox/, ...

* Executable

#+begin_src bash
  # How do I find the OS/architecture of some rogue binary?

  # Linux
  $ file my_bin
  my_bin: ELF 64-bit, x86-64, GNU/Linux 3.2.0, stripped
  
  # macOS
  $ file my_bin
  my_bin: Mach-O 64-bit executable x86_64
  
  # Windows (MSYS2 or WSL2)
  > file my_bin.exe
  my_bin.exe: PE32+ executable (console) x86-64, for MS Windows
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- Linker expects entry point
  + C-family standard: ~int main()~
  + OS alternatives e.g. ~WinMain~
- *Static dependencies resolved early* _build_
- *Dynamic dependencies resolved late* _run_
- Dependency Components
  + Headers (~.h~, ~.hpp~, ~.hxx~, ...) _compiler_
  + Libraries (~.a~, ~.lib~, ~.so~, ~.dll~, ...) _linker_ _os_
- Common Dependencies
  + System & third-party e.g. [[http://www.libpng.org/pub/png/libpng.html][libpng]] (~png.h~ + ~libpng.a~)

\\

| OS Family | Extension | Format                             |
|-----------+-----------+------------------------------------|
| Unix      | /none/    | Executable & Linkable Format ([[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF]]) |
| Windows   | ~.exe~    | Portable Executable ([[https://en.wikipedia.org/wiki/Portable_Executable][PE/PE32+]])     |
| macOS     | /none/    | Mach object ([[https://en.wikipedia.org/wiki/Mach-O][Mach-O]])               |

* Static vs Shared Libraries

#+begin_example
 +---------------------+----------+      +--------------+   +--------------+
 |                     |          |      |              |   |              |
 |                     |          |      |              |   |              |
 |   Application 1     |  Static  |      | Application  |   | Application  |
 |                     |  Lib A   |      |      3       |   |      4       |
 |                     |          |      |              |   |              |
 +---------------------+----------+      +------\-------+   +------/-------+
                                                 \                /
                                                  \              /
 +---------------------+----------+           +----\------------/-----+
 |                     |          |           |                       |
 |                     |          |           |                       |
 |   Application 2     |  Static  |           |    Shared Library B   |
 |                     |  Lib A   |           |                       |
 |                     |          |           |                       |
 +---------------------+----------+           +-----------------------+

#+end_example

* Static Library

#+ATTR_REVEAL: :code_attribs data-line-numbers='1,2,4,13-15'
#+begin_src bash
  $ ar -rcs libTrig.a sin.o cos.o tan.o
  $ ar -t libTrig.a
  sin.o cos.o tan.o
  $ nm libTrig.a
  0000000000000000 T sin
  0000000000001000 T cos
  
  $ ls -l
  80K   libTrig.a
  20K   libmath.a
  200K  tool.o
  $ gcc -o tool tool.o libTrig.a
  ld: sin.o: undefined reference to 'add(int, int)'
  $ gcc -o tool tool.o -ltrig -lmath
  $ ls -l tool
  300K  tool
#+end_src

#+begin_src bash :exports none
  > lib /out:trig.lib sin.obj cos.obj tan.obj
  > lib /list trig.lib
  sin.obj cos.obj
#+end_src

#+ATTR_REVEAL: :frag (appear)
- An archive of object files _linker_
  + With interface headers e.g. ~trig.h~ _compiler_
- *Code attached to final executable* _build_
  + Static/Compile-time linking by linker
- *Dependencies aren‚Äôt resolved!* _build_
  + Final binary to supply dependency
- Toolchain feature; OS uninvolved
- No entry functions ~main()~, ~DllMain()~, ...

** Pros & Cons

| No ‚Äúmissing dependencies‚Äù error for app    | No sweeping updates / fixes                 |
| No version mismatches or [[https://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]   | Every app to rebuild on update              |
| Single executable; simpler package/install | Disk space (fat binaries, multiple copies)¬π |
| Apps may ignore breaking lib version       | No on-demand loading / plug-ins             |
| Library needn‚Äôt be backward-compatible     | Slower build time for app (strip unused)    |

#+ATTR_HTML: :style font-size: large;
1: Doesn‚Äôt apply to /Windows/; each software brings its own (non-system) libraries

:SeeAlso:
[[https://www.akkadia.org/drepper/no_static_linking.html][Static Linking Considered Harmful]] - Ulrich Drepper
:END:

* Shared/Dynamic Library

#+ATTR_REVEAL: :code_attribs data-line-numbers='1,6,12'
#+begin_src bash
  $ g++ -o tool tool.o
  $ ls -l
  200K  tool.o
  200K  tool
  
  $ g++ -shared -fPIC {sin,cos,tan}.cpp -o trig.dll -lmath
  $ nm trig.dll
  0000000000000000 T sin
  0000000000001000 T cos ...
  
  $ gcc -o tool tool.o trig.dll
  $ ls -l
  80K   trig.dll
  200K  tool.o
  200K  tool
#+end_src

#+ATTR_REVEAL: :frag (appear)
- Single library shared across apps _run_
  + Single copy in memory at runtime
- *Static dependencies resolved* _build_
  + Need dynamic dependencies at launch
  + ~a.dll~ \rightarrow ~b.dll~ \rightarrow ... üò≤ _dependency chain_
- *Final executable contains +code+ only jumps*
- Dynamic/run-time linking by OS/loader _run_
  + Expects library presence in right path on
    - Launch
    - Demand: ~dlopen~, ~LoadLibrary~
- Entry functions e.g. ~DllMain~

\\

| OS      | Name                                                |
|---------+-----------------------------------------------------|
| Windows | Dynamic Link Libraries (~.dll~)                     |
| Linux   | Shared Objects (~.so~)                              |
| macOS   | Dynamic Shared Libraries/Bundles (~.dylib~ / ~.so~) |

** Pros & Cons

| Sweeping updates / fixes               | Missing dependencies; failure to launch       |
| Plug-ins / on-demand loads             | Versioning / Dependency Hell                  |
| Toolchain independent; cross-toolchain | OS dependent                                  |
| No app rebuilding                      | Many OS-specific binaries; pkg/install hassle |
| Lesser disk footprint                  | Backward-compatible considerations            |
|                                        | Forced updates breaking app                   |

* Tools and Switches

#+begin_src bash
  # GCC/MinGW on Windows
  > g++ -std=c++17 -D_DEBUG hello.cpp -g -O0 -flto -o hello.exe
  
  # MSVC on Windows
  > cl /EHsc /std:c++17 /D_DEBUG hello.cpp /Zi /Od /LTCG
#+end_src

#+ATTR_REVEAL: :frag (appear)
- Compiler Flags
  + Enable debug symbols: ~-g~
  + Disable optimizations: ~-O0~
- Linker Flags
  + Link time optimization: ~-flto~
- Preprocessor Flags
  + Define macros, add include dirs, etc.
  + ~-D_DEBUG~ \rightarrow ~#define _DEBUG~
  + ~-DPI=3.14~ \rightarrow ~#define PI 3.14~
- *List of flags can get long, /really long/*
  + MSVC: 166 (/1 platform, arch-neutral/)
  + GCC: [[https://gcc.gnu.org/onlinedocs/gcc-11.1.0/gcc/Option-Summary.html][gazillion]] (/multi-arch, multi-platform/ ü§Ø)

* Software and Features

#+begin_quote
Conditional compilation of certain pieces of code.
#+end_quote

#+begin_src bash
  # 2. Conditional Inclusion
  # BUILD.gn
  if (is_linux || is_chromeos) {
    sources += [
      "base_paths_posix.cc"
    ]
  }
#+end_src

#+begin_src cpp
  // 1. Macro
  // C++
  #if defined(ENABLE_TAB_TOGGLE)
    tab_toggler.init();
  #endif
#+end_src

#+ATTR_REVEAL: :frag (none none appear)
- Features are made of code
- Code can guarded by switches
  1. Macros
  2. Conditional inclusion of files
- *Binary won‚Äôt have omitted feature‚Äôs bits*
  + Unlike /command-line-flag/-enabled features

* Build Configuration

#+begin_quote
*Configuration*: particular combination of all switches¬π.
#+end_quote

#+ATTR_REVEAL: :frag (appear)
- Theoretically ~m √ó n~ switches (/toolchain √ó software/)
  + Strictly speaking ~m x n~ isn‚Äôt possible
- *Switches can be inter-dependant*
  + Example: turning on PDF might need Print support
  + Example: turning on logging for /Debug/ builds
- Manual: tedious and error-prone
  + Hampers reproducibility, productivity and maintenance

\\

|         | Emojis | Speech | Plugins | Logging | Debug | Optimization |
|---------+--------+--------+---------+---------+-------+--------------|
| Config1 | ‚úì      | ‚úì      | ‚úì       |         |       | ‚úì            |
| Config2 |        |        | ‚úì       | ‚úì       | ‚úì     |              |

#+ATTR_HTML: :class footnote
1: Think: ~args.gn~

* Common Configurations

#+begin_src bash
  $ cd ~/edge/src
  $ gn args out/release_x64 --list --short | wc -l
  887
  
  $ wc -l < out/release_x64/args.gn
  11
  $ gn args out/release_x64 --list --short --overrides-only | wc -l
  20
  
  $ gn args out/release_x64 --list=crashpad_dependencies
  crashpad_dependencies
    Current value = "chromium"
      From //.gn:51
    Overridden from the default = "standalone"
      From //third_party/crashpad/crashpad/build/crashpad_buildconfig.gni:19
#+end_src

- /Debug/
  + Disable optimizations
  + Keep symbols
- /Release/
  + Enable optimizations
  + Strip debug symbols
- Debug \minus logging (/DbgNoLog/)
- Release + debug (/RelDbg/)
- Release + size optimization (/RelMinSize/)
- ...

* Part 2 -- Build System
* Make

#+ATTR_REVEAL: :frag (appear)
- First step towards build automation
- Minimal enough to learn important build concepts
- Powerful enough; still used in production code
  + Good for quick workouts personally
- Cross-platform, cross-toolchain POSIX standard _productivity_
  + GCC/Clang: GNU ~make~, BSD ~make~; MSVC: ~nmake~
  + Most IDEs support Makefile-based projects
  + VS 2019+: UNIX makefile project template
- Rebuild only changed parts _speed_ _dry_
  + Avoids hand-compiling tedium and mistakes
  + Enables build reproducibility in a team

* Makefile Rules ü§ò

#+begin_src makefile
# commonly used flags in variable
CXXFLAGS       = -std=c++17 -Wall
LDFLAGS        = -flto

biryani: rice.o spices.o
    g++ $(LDFLAGS) -o biryani rice.o spices.o
    cp biryani ./installer/bin

spices.o: spices.cpp spices.h
    g++ $(CXXFLAGS) -o spices.o -c spices.cpp

rice.o: rice.cpp rice.h utensils.h spices.h
    g++ $(CXXFLAGS) -o rice.o -c rice.cpp

clean:
    rm -rf biryani *.o

.PHONY: clean
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- Add ~Makefile~ at project root with /rules/
- *Target*: final artefact expected
  + Considered outdated if older than a dependency 
- *Dependency*: ingredients needed to make target
- *Recipe*: snippet making target from dependencies
  + Target /outdated/ ¬π? Re-run recipe!
- ~make~: build first target
  + ~make TARGET~: only build ~TARGET~ (and its dependencies)
- /Golden Rule/
  + /Every target‚Äôs recipe should update file naming it./
  + Add exceptions to ~.PHONY~; always outdated

#+ATTR_HTML: :class footnote
1: older than a dependency

* Makefile Refinements

#+begin_src makefile
# commonly used flags in variable
CXXFLAGS = $(USERFLAGS) -std=c++17 -Wall
LDFLAGS  = -flto      # LTO ON
LDLIBS   = -lz -lmath # libMath.a, libZ.a

biryani: rice.o spices.o
    $(CC) $(LDFLAGS) -o $@ $^ $(LDLIBS)
    cp biryani ./installer/bin

spices.o: spices.cpp spices.h
rice.o: rice.cpp rice.h utensils.h spices.h
doc: ref.html tutorial.html

# Pattern rule
%.html: %.md
    pandoc -o $@ $<
# e.g. pandoc -o ref.html ref.md

clean:
    $(RM) biryani *.o

commit:
    git add $(wildcard *.cpp *.h)
    git commit

.PHONY: clean doc commit
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- Power to build engineers
  + Override settings without editing ~Makefile~
  + ~make CC=clang++~: override toolchain to Clang
  + ~USER_FLAGS='-DMY_SHINY_FEATURE=ON -O3' make~
- Special variables
  + target ~$@~, dependencies ~$^~, first dep: ~$<~
- Pattern rule: map ~.X~ \rightarrow ~.Y~
- Make /knows/ how to build ~.o~ from ~.cpp~, ~.c~, etc.
  + Implicit rule: ~$(CC) -c $(CFLAGS) -o $@ $<~
- Make isn‚Äôt language-specific
  + ~make doc~ builds documentation using [[https://pandoc.org/][Pandoc]]
  + ~make install~: bunch of copies

* Makefile Builds

#+begin_src makefile
  .POSIX:
  COMPILER_FLAGS = -Wall -Werror -pedantic -pedantic-errors
  CXXFLAGS       = -std=c++17 $(COMPILER_FLAGS)
  
  all: debug release
  
  debug: CXXFLAGS += -g -O0 -D_DEBUG -DDEBUG
  debug: hello
  
  release: CXXFLAGS += -O2 -DNDEBUG
  release: hello
  
  hello: hello.swift MyCMod/adder.o
      swiftc -I . -o $@ $<
  
  MyCMod/adder.o: MyCMod/adder.cpp MyCMod/adder.h
  
  clean:
      $(RM) hello MyCMod/adder.o
  
  .PHONY: all clean
#+end_src

- Separate debug and release targets
- Per-target variable values
- ~make debug~ and ~make release~
- ~make~ to build both
  + Convention: Make an ~all~ target
- Complexity ‚àù Configurations √ó Dependencies
  + Natural to any build system
  + No on /writes/ ~build.ninja~
  + [[https://ninja-build.org/][Ninja‚Äôs introduction]] calls this out!
    - A low-level but fast make system

\\

#+begin_quote
‚Äú[...] designed to have its input files generated by a higher-level build system.  Ninja build files are human-readable but not especially convenient to write by hand.‚Äù
#+end_quote

* Part 3 -- Meta-Build System
* Meta on Meta-Build Systems

#+ATTR_REVEAL: :frag (appear)
- A /generator/ of build/project files
  + /Generate Ninja/ (GN) generates VS, Xcode, Eclipse, QtCreator solutions too
  + Alternatives: [[https://cmake.org/][CMake]], [[https://premake.github.io/][premake]], [[https://xmake.io/][xmake.io]], [[https://mesonbuild.com/][meson]], [[https://waf.io/][Waf]], [[https://scons.org/][SCons]], [[https://bazel.build/][Bazel]], ...
- Scriptability
  + Run code based on environment/parameters and generate
  + Copy resources, pre-/post-tasks, make installer package
- Multi-language support
  + /Ant/: Java, /rake/: Ruby, /Cargo/: Rust, ...
- Cross-platform, multi-IDE support
- Natural evolution of build systems
- Best of both worlds
  + CLI: Build automation, speed, correctness
  + GUI: Developer-friendly, wider adoption

* GN Basics

#+begin_src bash
  executable("img_view") {          # target
    sources = [
      "window.cpp",
      "filter.cpp",
    ]
  
    cflags = [ "-Wall" ]            # flags
    defines = [ "USE_GPU=1" ]       # feature macros
    include_dirs = [ "./inc" ]
  
    dependencies = [
      ":libpng",                     # in-file
      # ‚Äòcore‚Äô under third_party/animator/BUILD.gn
      "//third_party/animator:core"  # qualified
      # ‚Äòmarkdown‚Äô under third_party/markdown/BUILD.gn
      "//third_party/markdown"       # implicit
    ]
  
    if (is_win) {
      sources += [ "d3d11.cpp" ]
      sources -= [ "window.cpp" ]
      ldflags = [ "/SUBSYSTEM:WINDOWS",
                  "/DELAYLOAD: d3d11.dll" ]
    }
  }
  
  static_library("libpng") {
    sources = [
        "encoder.c",
        "decoder.c",
      ]
  
    public_deps = [
      "//third_party/boost:file_io"
    ]
  }
  
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- 5 target types for 5 binaries/artefacts
  + ~executable~, ~static_library~, ~shared_library~
  + ~loadable_module~, ~source_set~ _rare_
- Often used properties of targets
  + ~sources~: define (~= [ ‚Ä¶ ]~), add (~+=~) or remove (~-=~)
  + ~cflags~ / ~ldflags~: compiler or linker flags
  + ~defines~: (feature) macros
- Labels: name of dependency graph node e.g. ~":base"~
  + Targets, Configurations, Toolchains
- Core ideas from /Make/
  + Targets, Dependencies, Flags, Macros

\\

|         | Executable | Static | Shared   | Loadable Module | Source Set |
|---------+------------+--------+----------+-----------------+------------|
| Windows | ~.exe~     | ~.lib~ | ~.dll~   | ~.dll~          | ~.obj~     |
| Linux   | /none/     | ~.a~   | ~.so~    | ~.so~           | ~.o~       |
| macOS   | /none/     | ~.a~   | ~.dylib~ | ~.so~           | ~.o~       |

* Transitive Dependencies

#+begin_src bash
  # A can use B and C but not super_secret
  executable("A") {
    deps = [ ":B" ]
  }
  
  shared_library("B") {
    public_deps = [ ":C" ]
    deps = [ ":super_secret" ]
    # link no code from evil directory
    assert_no_deps = [ "//evil/*" ]
  }
#+end_src

#+ATTR_REVEAL: :frag (none appear)
- Dependency chain: ~A~ \rightarrow ~B~ \rightarrow ~C~
  + ~dependencies~: ~B~ can include/use ~C~; ~A~ can‚Äôt
  + ~public_deps~: A can include ~C~ too
- This is *recursive*!
- Public or Private?
  + ~B~ should publicly depend on ~C~ if it‚Äôs part of interface ~B~
  + Private dependency if it‚Äôs just implementation detail
- Shared Libraries
  + Final target links to all publicly dependent shared libraries
- Static Libraries don‚Äôt resolve dependencies anyway
  + Link both ~deps~ and ~public_deps~ to final target
  + Final target can include from ~public_deps~
- ~assert_no_deps~: disallow targets from linking

:gn_setup_files:
- ~//.gn~: defines project root; see ~gn help dotfile~
- ~//build/config/BUILDCONFIG.gn~: global variables and default settings
:end:

* Args and Configs

#+begin_src bash
declare_args() {
  enable_command_line = false
  use_opengl = true
  assert(!(use_opengl && enable_command_line),
         "Can‚Äôt use OpenGL and terminal together")
}

config("memory_tagging") {
  if (current_cpu == "arm64" && is_linux) {
    cflags = [ "-march=armv8-a+memtag" ]
  }
}

executable("img_view") {
  if (use_opengl) {
    ldflags += [ "/DELAYLOAD: opengl32.dll" ]
  }
  configs += [ ":memory_tagging" ]
}

shared_library("cpu_filters") {
  sources = [ "shaders.cpp" ]
  configs += [ ":memory_tagging" ]
  if (use_opengl) {
    # using GPU, skip tagging CPU memory
    configs -= [ ":memory_tagging" ]
  }
}
#+end_src

- ~declare_args~: define arguments for your target
  + Set in ~args.gn~, command-line or toolchain args
- ~config~: distil common configuration for reuse
  + ~public_config~ to propagate up the dependency chain
  + ~A~ inherits ~public_configs~ of ~C~ too
- ~all_dependent_configs~: force configs on dependants _rare_
  + Forced on target, its dependents, its dependents ...
  + Can‚Äôt remove (~-=~) these configs

* Data Dependencies

- ~data~: Runtime data dependencies
  + List files/dirs required to run target
  + Paths interpreted relative to current build file
  + e.g. strings compiled into binary, XML, ...
- ~data_deps~: non-linked runtime dependencies
  + Built and available for use
  + Generally plugins or helper programs
- List a target‚Äôs runtime data dependencies
  + ~gn desc TARGET~ lists in ~runtime_deps~ section
  + Get for many: ~gn --runtime-deps-list-file=INPUT~
    - ~OUTPUT.runtime_deps~ in target‚Äôs output directory

* Actions

#+begin_src bash
action("run_this_guy_once") {
  script = "doprocessing.py"
  sources = [ "my_configuration.txt" ]
  outputs = [ "$target_gen_dir/some_output.txt" ]

  # doprocessing.py imports this script; rebuild if it changes
  inputs = [ "helper_library.py" ]

  # root_build_dir is script‚Äôs working dir
  args = [ "-i", rebase_path(inputs[0], root_build_dir),
           rebase_path(outputs[0], root_build_dir) ]
}

copy("mydll") {
  sources = [ "mydll.dll" ]
  outputs = [ "$target_out_dir/mydll.dll" ]
}
#+end_src

Useful for pre-/post-build tasks
- ~action~: target to run script once
- ~action_forach~: run over set of files
- ~copy~: target to copy files
  + Cross platform abstraction

* Useful Commands

#+begin_src bash
$ cd out/debug_x64

$ gn ls . '//base/*'   # list all base targets
//base:base
//base:base_paths
//base:base_static
//base:build_date
//base:build_utf8_validator_tables
//base:check_example
//base:debugging_flags
//base:i18n

$ gn ls .  # list all targets under all paths
# list only static libraries under //base; --type understand all 5 artefacts

$ gn ls . --type=static_library '//base/*'
//base:base
//base:base_static
//base:i18n

# ‚Äª get the actual target to feed ninja ‚Äª
$ gn ls . --type=static_library --as=output '//base/*'
obj/base/libbase.a
obj/base/libbase_static.a
obj/base/libbase_i18n.a
$ autoninja obj/base/libbase_static.a  # build only libbase_static.a

# ‚Äª what if I want to build just one .cc?  drop to ninja level ‚Äª
$ ninja -t targets all > all_targets.txt
$ grep 'browser_window_ring' all_targets.txt  # Windows: findstr /srip /C:
obj/chrome/browser/ui/ui/browser_window_ring_touch_bar.o: objcxx
obj/chrome/test/unit_tests/browser_window_ring_touch_bar_unittest.o: objcxx
$ autoninja obj/chrome/browser/ui/ui/browser_window_ring_touch_bar.o

# Why can‚Äôt I include a header from dependency X?  X isn‚Äôt a public_dep.
$ gn path . --public //components/history/content/browser //chrome/browser
No public paths found between these two targets.

# find path and depend on a target; include headers
$ gn path . //cc/base //content/browser
//content/browser:browser --[public]-->
//services/viz/public/mojom:mojom --[public]-->
//cc/paint:paint --[public]-->
//cc/base:base

# print dependency tree
$ gn desc . //tools/gn deps --tree
//base:base
  //base:base_paths
  //base:base_static
  //base:build_date
  //base:copy_dbghelp.dll
  //base:debugging_flags
  //base/allocator:allocator
    //base/allocator:allocator_shim
      //base/allocator:prep_libc

# where did that flag come from?
$ gn desc . //base cflags --blame
From //build/config/compiler:default_optimization
     (Added by //build/config/BUILDCONFIG.gn:456)
  /Od
  /Ob0
  /RTC1
From //build/config/compiler:default_symbols
     (Added by //build/config/BUILDCONFIG.gn:457)
  /Zi

gn check .
ERROR at //base/files/file_path.cc
#include "sql/statement.h"
          ^--------------
It is not in any dependency of
  //base:base
The include file is in the target(s):
  //sql:sql
which should somehow be reachable.
#+end_src

- ~gn help~: built-in help
  + ~gn help ls~, ~gn help root_out_dir~
- ~gn ls~: list targets
- ~gn desc~: describe targets
  + Try ~--tree~ and ~--blame~
- ~gn path~: dependency path from two targets
- ~gn args~: query current build‚Äôs arguments
- ~gn clean~: keep only ~args.gn~ and Ninja files

* Templates

#+begin_src bash
template("grit") {
  ...
}
grit("components_strings") {
  source = "components.grd"
  output = [ ... ]
}

template("component") {
  if (is_component_build) {
    _component_mode = "shared_library"
  } else if (defined(invoker.static_component_type)) {
    assert(invoker.static_component_type == "static_library" ||
           invoker.static_component_type == "source_set")
    _component_mode = invoker.static_component_type
  } else if (!defined(invoker.sources) || invoker.sources == []) {
    # When there are no sources defined, use a source set to avoid creating
    # an empty static library (which generally don't work).
    _component_mode = "source_set"
  } else {
    _component_mode = "static_library"
  }
}

component("base") {
  # sources, flags, etc.
}
#+end_src

- Create your own target /type/
  + From 5 primitive types _class_
- Use ~.gni~ files to ~import~
  + Shared variable and template
- Popular Templates
  + ~component~ (~//build/config/BUILDCONFIG.gn~)
    - Shared library for component builds like ~debug~
  + ~msvc_toolchain~ (~//build/toolchain/win/BUILD.gn~)
  + ~clang_toolchain~ (~//build/toolchain/gcc_toolchain.gni~)
  + ~apple_toolchain~ (~//build/toolchain/apple/toolchain.gni~)

* Setup

- GN usable outside Chromium too
  + Work > generic meta build systems (like /CMake/, /premake/, etc.)
- Refer GN‚Äôs [[https://gn.googlesource.com/gn/+/main/examples/simple_build][simple_build]] example
- Define ~.gn~ at project root
  + ~gn help dotfile~
- Define configurations: ~//build/config/BUILDCONFIG.gn~
  + Global variables (~is_win~, ~{target,host}_os~, ~{target,host}_cpu~, ...)
  + Defaults for targets: ~gn help set_defaults~
    - ~set_defaults(static_library) { configs = [ ":def_flags", ":optimize" ] }~
- Define toolchain(s)
- Supports C, C++, Rust, Objective-C and Swift

* Toolchain

#+begin_src bash
# gn.googlesource.com/gn/+/main/examples/simple_build/build/toolchain/BUILD.gn
toolchain("gcc") {
  tool("cc") {
    command = "gcc {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }
  tool("cxx") {
    description = "CXX {{output}}"
    # ... snipped ...
  }
  tool("alink") {
    command = "rm -f {{output}} && ar rcs {{output}} {{inputs}}"
    description = "AR {{target_output_name}}{{output_extension}}"
    outputs =
        [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }
  tool("solink") {
    description = "SOLINK $soname"
    # ... snipped ...
  }
  tool("link") {
    outfile = "{{target_output_name}}{{output_extension}}"
    # reponse file to hold command until successful execution
    rspfile = "$outfile.rsp"
    rspfile_content = "{{inputs}}"
    command = "g++ {{ldflags}} -o $outfile @$rspfile {{solibs}} {{libs}}"
    description = "LINK $outfile"
    default_output_dir = "{{root_out_dir}}"
    outputs = [ outfile ]
  }
  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }
  tool("copy") {
    command = "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
#+end_src

- Identifier Label
- Global variables ~OS~, ~CPU~, etc.
- Specify tools of chain
  + {C, C++} compiler
  + linker
  + stamp
  + copy
- ~set_default_toolchain~ if > 1
- Under ~//build/toolchain~

* References

1. [[https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html][GNU Compile Collection Documentation]]
2. [[https://docs.microsoft.com/en-us/cpp/build/reference/compiling-a-c-cpp-program?view=msvc-160][Microsoft MSVC compiler Reference]]
3. [[https://www.gnu.org/software/make/manual/make.html][GNU Makefile Documentation]]
4. [[Https://makefiletutorial.com/][MakefileTutorial.com]] _friendly_
5. [[https://gn.googlesource.com/gn/+/main/docs/][GN Documentation]]
   + Quick Start, Reference, Style Guide, Language
6. [[https://docs.google.com/presentation/d/15Zwb53JcncHfEwHpnG_PoIbbzQ3GQi_cpujYwbpcbZo][Using GN Build]] (2015)
7. [[https://cs.chromium.org/][Chromium codebase]]
8. [[https://www.stackoverflow.com][StackOverflow.com]]

* Credits

- [[https://revealjs.com/][reveal.js]], stunning HTML5 presentations
- [[https://orgmode.org][Org-mode]], your life in plain text
- [[https://www.gnu.org/software/emacs/][Emacs]], text editor /extraordinaire/
- [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]], org \rightarrow reveal converter

* Thank you!


# https://emacs.stackexchange.com/q/12938/4106
# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (progn (org-babel-goto-named-src-block "startup") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
